#include <jni.h>\n#include <android/log.h>\n#include <opencv2/opencv.hpp>\n\nextern "C" JNIEXPORT void JNICALL\nJava_com_example_edgeviewer_NativeBridge_processGrayscale(\n        JNIEnv* env, jobject /* this */,\n        jint width, jint height, jbyteArray yPlane, jint yRowStride,\n        jbyteArray outRgba) {\n    jbyte* yPtr = env->GetByteArrayElements(yPlane, nullptr);\n    jbyte* outPtr = env->GetByteArrayElements(outRgba, nullptr);\n    cv::Mat yMat(height, width, CV_8UC1);\n    // Copy with row stride handling\n    for (int r = 0; r < height; ++r) {\n        memcpy(yMat.ptr(r), yPtr + r * yRowStride, width);\n    }\n    cv::Mat rgba;\n    cv::cvtColor(yMat, rgba, cv::COLOR_GRAY2RGBA);\n    memcpy(outPtr, rgba.data, width * height * 4);\n    env->ReleaseByteArrayElements(yPlane, yPtr, JNI_ABORT);\n    env->ReleaseByteArrayElements(outRgba, outPtr, 0);\n}\n\nextern "C" JNIEXPORT void JNICALL\nJava_com_example_edgeviewer_NativeBridge_processCanny(\n        JNIEnv* env, jobject /* this */,\n        jint width, jint height, jbyteArray yPlane, jint yRowStride,\n        jbyteArray outRgba) {\n    jbyte* yPtr = env->GetByteArrayElements(yPlane, nullptr);\n    jbyte* outPtr = env->GetByteArrayElements(outRgba, nullptr);\n    cv::Mat yMat(height, width, CV_8UC1);\n    for (int r = 0; r < height; ++r) {\n        memcpy(yMat.ptr(r), yPtr + r * yRowStride, width);\n    }\n    cv::Mat edges;\n    cv::Canny(yMat, edges, 50, 150);\n    cv::Mat rgba;\n    cv::cvtColor(edges, rgba, cv::COLOR_GRAY2RGBA);\n    memcpy(outPtr, rgba.data, width * height * 4);\n    env->ReleaseByteArrayElements(yPlane, yPtr, JNI_ABORT);\n    env->ReleaseByteArrayElements(outRgba, outPtr, 0);\n}\n
